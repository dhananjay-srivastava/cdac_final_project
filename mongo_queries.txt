db.data.aggregate( [ { $project : { "fos.name" : 1 , id : 1 , _id : 0} } , { $addFields : { fos : '$fos.name' } } , { $out : "fosdata" } ] ).pretty()

db.fosdata2.aggregate([{
            $unwind : "$fos"
        }, {
            $lookup : {
                from : "fosdata2",
                localField : "_id",
                foreignField : "_id",
                as : "items"
            }
        }, {
            $unwind : "$items"
        }, {
            $unwind : "$items.fos"
        }, {
            $redact : {
                $cond : {
                    if  : {
                        $cmp : ["$fos", "$items.fos"]
                    },
                then : "$$DESCEND",
                else  : "$$PRUNE"
            }
        }
    }, {
        $group : {
            _id : {
                k1 : "$fos",
                k2 : "$items.fos",
            },
            items : {
                $sum : 0.5
            }
        }
    }, {
        $sort : {
            "_id" : 1
        }
    }, {
        $project : {
            _id : 1,
            items : 1,
            a : {
                $cond : {
                    if  : {
                        $eq : [{
                                $cmp : ["$_id.k1", "$_id.k2"]
                            }, 1]
                    },
                then : "$_id.k2",
                else  : "$_id.k1"
            }
        },
        b : {
            $cond : {
                if  : {
                    $eq : [{
                            $cmp : ["$_id.k1", "$_id.k2"]
                        }, -1]
                },
            then : "$_id.k2",
            else  : "$_id.k1"
        }
    },

}
}, {
    $group : {
        _id : {
            k1 : "$a",
            k2 : "$b",
        },
        items : {
            $sum : "$items"
        }
    }
}, {
    $project : {
        _id : 0,
        node : "$_id.k1",
        arc : "$_id.k2",
        weight : "$items"
    }
} , { $out : "graph" }
] ,  {allowDiskUse : true})

db.graph.aggregate([{$group:{_id:"$node",degree:{$sum: 1}}},{$out:"degree"}]).pretty()

db.graph.aggregate([
{$match:{
	node:"Lyapunov stability"
	}},
{$sort:{
	weight:-1
	}},	
{$limit:30
	},
{$lookup:{
	from:"degree",
	let:{checker:"$node"},
	pipeline: [
	{$match:{$expr:{$eq:["$_id","$$checker"]}}},
	{$project:{_id:0}}
	],
	as: "degree"
	}},
{$sort:{
	degree:-1
	}},
{$project:{
_id:0,arc:1
}
}
]).map(function(e) { return e.arc })

topics = db.degree.find().map(function(e) {return e._id})

db.data.aggregate([
					{ $match: { $and:[{'indexed_abstract.InvertedIndex':{$ne:null}},
									  {fos:{$ne:null}},
									  {n_citation:{$ne:null}},
									  {doi:{$ne:null}}]
								 }},
					{$sample:{size:100000}},
					{$project:{'_id':'$id',
								 'title':1,
								 'authors':1,
								 'venue.raw':1,
								 'year':1,
								 'n_citation':1,
								 'indexed_abstract.InvertedIndex': 1,
								 'fos': 1,
								 'doi':1,
								}},
					{$out:"final_data"}
					],
					{allowDiskUse: true})
